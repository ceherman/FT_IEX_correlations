function solution = ColloidalSam()



    n=1; % number of component without salt

    % Step 1: Construct general rate model unit operation
% ===================================================

% General rate model unit operation
mGrm = GeneralRateModel();
mGrm.nComponents = n+1; % each component data +salt
mGrm.nCellsColumn = 60;
mGrm.nCellsParticle =30;
    mGrm.nBoundStates = [0 ones(1,n)];


% Initial conditions
mGrm.initialBulk = [100.12 zeros(1,n)]; % [mol / m^3]
mGrm.initialSolid = zeros(1,n);

% Transport
mGrm.dispersionColumn          = 3.9e-8; % [m^2 / s]
mGrm.filmDiffusion             = [1e-4 1e-4]; % [m/s]
mGrm.diffusionParticleSurfaceDependence ='LIQUID_SALT_EXPONENTIAL';
    %mGrm.diffusionParticleSurfaceMultiplexMode =[0];

    mGrm.diffusionParticle         = [6e-11 2e-11];
    mGrm.diffusionParticleSurface  = [3e-15]; % substituting any values does not change the output

%   mGrm.surfDiffLogKeqPowFactor = [2e-12];
%   mGrm.surfDiffLogKeqPowExp =[-1.29];
%   mGrm.surfDiffLogKeqConst =[0];

    mGrm.surfDiffExpFactor         =[ 1];% substituting any values does not change the output
    mGrm.surfDiffExpArgMult        = [ 0.0267];% substituting any values does not change the output

    % %%%%%%%Geometry



mGrm.columnLength                   = 0.05; % [m]
    mGrm.interstitialVelocity           = 4.01e-4/0.470; % [m/s]
    mGrm.particleRadius                 = 3.25e-5; % [m]
mGrm.porosityColumn                 = 0.470; % [-]
mGrm.porosityParticle               = 0.230; % [-]
    mGrm.particleCoreRadius             = 0;

    mGrm.useAnalyticJacobian =false;

% Adsorption
isotherm = ColloidalBinding();
isotherm.kineticBinding                     = true;
isotherm.kKin                               = 1e10*ones(1,(n+1)) ;
    isotherm.logKeqPhExponent                   =  [ 0 0];
    isotherm.logKeqSaltPowerLawFactor           =  [ 0 53430];
isotherm.logKeqSaltPowerLawExponent         =  [ 0 1.72 ] ;
    isotherm.logKeqSaltExpLawFactor             =  [ 0 -3.93] ;
    isotherm.logKeqSaltExpLawExponentFactor     =  [ 0 0] ;

    isotherm.bppPhExponent                      = [ 0 0];
    isotherm.bppSaltPowerLawFactor              = [ 0 37220] ;
    isotherm.bppSaltPowerLawExponent            = [ 0 -2.25];
    isotherm.bppSaltExpLawFactor                = [ 0 0.26] ;
    isotherm.bppSaltExpLawExponentFactor        = [ 0 0] ;

    isotherm.radius     = [1.59e-9 4.5e-9 ];

    isotherm.phi = 4.92e07;


    isotherm.cordNum = 6;
    isotherm.linearizationThreshold = 1e-7;

    isotherm.kappaFactor =  0;
    isotherm.kappaExponent = 0;
    isotherm.kappaConstant = 2.5;
    isotherm.usePh = false;
mGrm.bindingModel = isotherm;


% Step 2: Construct inlet unit operation
% ===================================================

% Inlet unit operation
mIn = PiecewiseCubicPolyInlet();
mIn.nComponents = n+1;
    nSections=4;

    mIn.constant       = zeros(nSections, mIn.nComponents);
mIn.linear         = zeros(nSections, mIn.nComponents);
mIn.quadratic      = zeros(nSections, mIn.nComponents);
mIn.cubic          = zeros(nSections, mIn.nComponents);

% Section 1: First phase loading
mIn.constant(1,1)  = 100.120;  % salt in load
%%%%%%% protien load concentration
    mIn.constant(1,2:end)=0.03321;

    % Section 2: wash

mIn.constant(2,1)  = 100.120;  % salt in wash


    mIn.constant(3,1)  =  100.12;%  % salt in elution start
    mIn.linear(3,1)    =  0.108;  % slope of salt

    % Section 4: Second Phase regen

    mIn.constant(4,1)  =  370;%  % salt in elution start


% Step 3: Assemble system of unit operations
% ===================================================
    mOut = OutletModel();
mOut.nComponents = n+1;
% Construct ModelSystem and assign unit operations (order determines IDs)
mSys = ModelSystem();
mSys.models = [mIn, mGrm, mOut];

% Define valve configurations / unit operation connections

mSys.connectionStartSection = [0 ];

    mSys.connections = {[0, 1, -1, -1, -1, -1, 1.0; ... % total =7[ 1.unit_fr, 2.unit_to, 3.port_fr,4.port_to, 5.comp_fr, 6.comp_to,7. Vol Flow]
                    1, 2, -1, -1, -1, -1, 1.0]};

% Step 4: Create simulator and configure it
% ===================================================

% Construct and configure simulator
sim = Simulator.create();
    sim.nThreads = 16;


    sim.sectionTimes = [0.0, 703.8, 1840, 4331, 4500]; % 20 CV
    sim.sectionContinuity = [false false false];
    sim.solutionTimes = linspace(sim.sectionTimes(1), sim.sectionTimes(end), 200); % [s], time points at which solution is computed


    sim.model = mSys;


% Step 5: Run the model and plot the results
% ===================================================
%      hd= strcat ('C:\Users\Vijesh\Google Drive\CADET_Nimble\SDGradient'.h5');
%     sim.saveAsHDF5(hd);
% Run the model


    result = sim.run();


    solution = [result.solution.time, squeeze(result.solution.outlet{3})];
    figure()

    plotyy( solution(:, 1), solution(:, 3:end), solution(:, 1), solution(:, 2));






end
